type s = { x : uint8; l : uint16 list; sl : BasePTypes.string list }

let parse_s n m input =
  let x = parse_uint8 input in
  let l = parse_list n "l" parse_uint16 input in
  let sl = parse_list m "sl" (BasePTypes.parse_string 4) input
  in { x = x; l = l; sl = sl; }
  
let dump_s buf s =
  let _x = dump_uint8 buf s.x in
  let _l = dump_list dump_uint16 buf s.l in
  let _sl = dump_list BasePTypes.dump_string buf s.sl in ()
  
let value_of_s s =
  Parsifal.VRecord
    [ ("@name", (Parsifal.VString (("s", false))));
      ("x", (Parsifal.VLazy (lazy (value_of_uint8 s.x))));
      ("l", (Parsifal.VLazy (lazy (value_of_list value_of_uint16 s.l))));
      ("sl",
       (Parsifal.VLazy (lazy (value_of_list BasePTypes.value_of_string s.sl)))) ]
  

