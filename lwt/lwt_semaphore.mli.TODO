(* Lightweight thread library for OCaml
 * http://www.ocsigen.org/lwt
 * Interface Lwt_semaphore
 * Copyright (C) 2005-2008 Jérôme Vouillon
 * Laboratoire PPS - CNRS Université Paris Diderot
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, with linking exceptions;
 * either version 2.1 of the License, or (at your option) any later
 * version. See COPYING file for details.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *)

(** Cooperative semaphores *)

type t
  (** Type of Lwt semaphores *)

val create : int -> t
  (** [create n] creates a new semaphore, which originally contains
      n resources *)

val wait : t -> unit Lwt.t
  (** [wait sem] consumes one resource of the semaphore, that is:

      - if some resources are still available, the counter is decremented
        and {!wait} returns immediately

      - if no resources are available, then {!wait} waits for a thread to
        post a new resource, then it resumes

      Note: threads are woken up in the same order they try to consume a
      resource *)

val post : t -> unit
  (** [post sem] increments the number of resources if no threads is
      waiting on it. Otherwise it will eventually removes the first one
      and resumes it. *)

val resources_available : t -> int
  (** [resources_available sem] returns the number of resources
      available in the semaphore *)

val is_empty : t -> bool
  (** [is_empty sem] returns [true] if they are no thread waiting on
      the semaphore, and [false] otherwise *)

val with_semaphore : t -> (unit -> 'a Lwt.t) -> 'a Lwt.t
  (** [with_semaphore sem f] is used to consume a resource from the
      semaphore within a block scope. The function [f ()] is called
      after consuming a resource, and its result is returned from the
      call to {with_semaphore}. If an exception is raised from f, the
      resource is also released before the scope of {with_semaphore}
      is exited. *)
