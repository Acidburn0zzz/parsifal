################################################
# you should not change anything after this line

OCAMLC = ocamlc
OCAMLDEP = ocamldep
OCAMLFIND = ocamlfind
OCAMLMKTOP = ocamlmktop
OCAMLOPT = ocamlopt

GEN_INCLUDES = $(shell $(OCAMLFIND) query -format "-I %d" -predicates native $(OCAML_LIBS))
GEN_LIBS = $(shell $(OCAMLFIND) query -format "%a" -predicates native -recursive $(OCAML_LIBS))
GEN_BYTE_INCLUDES = $(shell $(OCAMLFIND) query -format "-I %d" -predicates byte -recursive $(OCAML_LIBS))
GEN_BYTE_LIBS = $(shell $(OCAMLFIND) query -format "%a" -predicates byte -recursive $(OCAML_LIBS))

# use the following variables to add extra flags (not guessed by ocamlfind)
OCAMLOPTS_CC = $(GEN_INCLUDES) $(EXTRA_OCAMLOPT_CC_FLAGS) -I $(BUILD_DIR)
OCAMLOPTS_LD = $(GEN_INCLUDES) $(GEN_LIBS) $(EXTRA_OCAMLOPT_LD_FLAGS)
OCAMLC_CC = $(GEN_BYTE_INCLUDES) $(EXTRA_OCAMLC_CC_FLAGS)
OCAMLC_LD = $(GEN_BYTE_INCLUDES) $(GEN_BYTE_LIBS) $(EXTRA_OCAMLC_LD_FLAGS)


# generic rules
all: builddir depends $(TARGETS) $(MLLIBS:%=$(BUILD_DIR)/%.cmxa) $(META_TO_BUILD)

top:
	$(MAKE) $(TARGETS:%=%.top)

byte:
	$(MAKE) $(TARGETS:%=%.byte) $(MLLIBS:%=$(BUILD_DIR)/%.cma) $(META_TO_BUILD)

test:
	echo $(OCAMLFIND) query -format "%o" -predicates byte -recursive $(OCAML_LIBS)


# TARGET handling (native, byte and toplevel)

define TARGET_template
 $(1)_OBJS := $$($(1)_SRCS:%.ml=$(BUILD_DIR)/%.cmx)
 $(1): $$($(1)_OBJS) $$($(1)_LIBS:%=-l%) ; $(OCAMLOPT) -o $$@ $(OCAMLOPTS_LD) $$^

 $(1)_BOBJS := $$($(1)_SRCS:%.ml=$(BUILD_DIR)/%.cmo)
 $(1).byte: $$($(1)_BOBJS) $$($(1)_LIBS:%=-l%) ; $(OCAMLC) -o $$@ $(OCAMLC_LD) $$^

 $(1).top: $$($(1)_BOBJS) $$($(1)_LIBS:%=-l%) ; $(OCAMLMKTOP) -o $$@ $(OCAMLC_LD) $$^

 ALL_INCS   += $$($(1)_INCS)
 ALL_SRCS   += $$($(1)_SRCS)
 ALL_OBJS   += $$($(1)_OBJS)
endef

$(foreach prog,$(TARGETS),$(eval $(call TARGET_template,$(prog))))



# MLLIB handling (native and byte)

define MLLIB_template
 $(1)_OBJS := $$($(1)_SRCS:%.ml=$(BUILD_DIR)/%.cmx)
 $(BUILD_DIR)/$(1).cmxa: $$($(1)_OBJS) $$($(1)_LIBS:%=-l%) ; $(OCAMLOPT) -a -o $$@ $$^

 $(1)_BOBJS := $$($(1)_SRCS:%.ml=$(BUILD_DIR)/%.cmo)
 $(BUILD_DIR)/$(1).cma: $$($(1)_BOBJS) $$($(1)_LIBS:%=-l%) ; $(OCAMLC) -a -o $$@ $(OCAMLC_LD) $$^

 META_TO_BUILD = $(BUILD_DIR)/META
 ALL_INCS   += $$($(1)_INCS)
 ALL_SRCS   += $$($(1)_SRCS)
 ALL_OBJS   += $$($(1)_OBJS)
endef

$(foreach lib,$(MLLIBS),$(eval $(call MLLIB_template,$(lib))))



# Simple compilation rules and dependencies

$(BUILD_DIR)/META: META
	cp $< $@

$(BUILD_DIR)/%.cmi: %.mli
	$(OCAMLC) -c $<

$(BUILD_DIR)/%.cmx: %.ml
ifdef USE_CAMLP4
	$(OCAMLFIND) $(OCAMLOPT) -o $@ -c -g $(OCAMLOPTS_CC) -syntax camlp4o $<
else
	$(OCAMLOPT) -o $@ -c -g $(OCAMLOPTS_CC) $<
endif

$(BUILD_DIR)/%.cmo: %.ml
ifdef USE_CAMLP4
	$(OCAMLFIND) $(OCAMLC) -o $@ -c -g $(OCAMLOPTS_CC) -syntax camlp4o $<
else
	$(OCAMLC) -o $@ -c -g $(OCAMLOPTS_CC) $<
endif


clean:
	rm -f *.cmo *.cmx *.cmi *.o $(TARGETS) $(TARGETS:%=%.byte) $(TARGETS:%=%.top) \
	   $(MLLIBS:%=%.cmxa) $(MLLIBS:%=%.cma) $(MLLIBS:%=%.a)
	[ -z "$(BUILD_DIR)" ] || rm -rf $(BUILD_DIR)


depends: builddir $(BUILD_DIR)/.depends

$(BUILD_DIR)/.depends: $(ALL_SRCS) $(ALL_INCS)
	[ -d "$(BUILD_DIR)" ] || mkdir "$(BUILD_DIR)"
ifdef USE_CAMLP4
	$(OCAMLFIND) $(OCAMLDEP) $(OCAMLOPTS_CC) -syntax camlp4o -native $^ > $@
else
	$(OCAMLDEP) $(OCAMLOPTS_CC) -native $^ > $@
endif
	sed -i -e "s+^\(.*\.cm.\):+$(BUILD_DIR)/\1:+" -e "s+ \([^/ ]*\.cm.\)+ $(BUILD_DIR)/\1+g" $(BUILD_DIR)/.depends

builddir: $(BUILD_DIR)

$(BUILD_DIR):
	mkdir $(BUILD_DIR)

.PHONY: all builddir clean depends byte top



-include $(BUILD_DIR)/.depends

