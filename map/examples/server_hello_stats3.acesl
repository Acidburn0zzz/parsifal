#!/home/yeye/dev/FAceSL/facesl.native

tls._minDisplay <- 2;
asn1._minDisplay <- 5;

foreach := function (_init, _next, _process) {
    local _resource, _object;
    _resource := _init;
    while _resource do
        _object := _next (_resource);
        if ! _object then return fi;
        _process (_object);
    done;
};

foreach_answer := function (f, path) {
    foreach (open (path), parse ("answer_dump"), f);
};

msgs_of_answer := function (answer) {
    extract_aux := function (flux) {
        if ! flux then return [] fi;
        local msg;
        msg := parse ("tls", flux);
        if msg
        then msg::(extract_aux (flux))
        else []
        fi
    };
    extract_aux (stream (answer.ip, answer.content));
};


extract_server_hello := function (answer) {
    local msg;

    if answer then
        msg := parse ("tls", stream (answer.ip, answer.content));
	if msg && (exists msg.handshake_msg_type) && (msg.handshake_msg_type = "Server Hello") then return msg fi;
    fi
};


stat_incr := function (dict, val) {
    dset (dict, val, dget_def (dict, val, 0) + 1);
};

stat_print := function (dict) {
    _separator := "\t -> ";
    iter (print, dict);
};


count_ciphers_answers := function (answer) {
    local server_hello;

    server_hello := extract_server_hello (answer);
    if (server_hello) then
      stat_incr (suites_stat, server_hello.ciphersuite);
      stat_incr (compression_stat, server_hello.compression_method);
      stat_incr (versions_stat, "${server_hello.version} - ${server_hello.sh_version}");
    fi
};

suites_stat := dict (30);
compression_stat := dict (2);
versions_stat := dict (10);

map (foreach_answer (count_ciphers_answers), args);

print ("Cipher suites:");
stat_print (suites_stat);

print ("\nCompression:");
stat_print (compression_stat);

print ("\nVersions:");
stat_print (versions_stat);
