v0.1 (feb. 2012)
 - Have a bugzilla to put all this stuff

 - X509
   * Add a cert store object
     + hashtable of certs
     + a name and a trust flag
   * Code construct_chains/check_chains in caml
     + add decoration directly to the certificate object (origin[s], trust)?
     + x509_chain should be an object module
       - list of decorated certs (trust, origin [Mozilla store, cert n in chain])
       - global attributes (enriched by check/chains with args [laxist, trusted store])
     + Low level functions
       - prepare_candidates (H : DN hashes -> certs)
       - find_next_candidate (H, current, options [use KI?])
       - check_link (subject, issuer)
     + Chain construction (chain up until now + pool of available certs [chain + trusted certs + untrusted certs])
       - avoid loops!
     + Chain checks (which can take trusted certificate stores to decorate the chain object)
       - validity span
       - check subject/issuer (+ *UniqueIdentifiers?)
       - signature
       - is there a trusted cert in the chain constructed
       - algos used
       - SKI/AKI could be relaxed (Applications are not required to verify that key identifiers match when performing certification path validation)
       - BC/
       - functions to check usage/name of the chain
       - use SAN/AIA/CRLDP/KU/EKU/NameConstraints or shout if a critical extension is not yet parsed
     + TLS chain construction -> use construct_chain with different stores (untrusted, MS, FF)
     + TLS chain analysis -> nCerts, nDupes, nUnused, nChains [+ characterisation]
     + Graph construction (From a big pool of certs, try to create all the links...)
   * Add SAN, AIA and CRLDP extensions
   * Write code to parse DSA PK and Sig.
   * Add a way to enrich/deep parse (to parse PK/sig/exts a posteriori)
   * Add a way to create a certificate object

 - Crypto
   * Add a is_prime as a C function (Rabbin Miller + PGCD with little p_i products)
   * Add a gen_rsa_key in Caml

 - FIND A NAME TO THIS PROJECT (FAceSL sucks!)
 - Have a Makefile-based build process!
   * cmake-ocaml?
   * ocamlmakefile?
   * ocamldep -I crypto -I asn1 -I common -I formats -I language -I tls -I tools [^_]*/*ml
 - TLS
   * Enrich TLS parser.
   * fake_len -> can override computed len
   * tls.dump -> calls record.split if needed
   * record.split -> TODO
   * Add parser for SSLv2.
 - Misc
   * Add encode/decode for gzip
   * Add an option to customize the integer dump -> hexdump or hexdump_with_separator or hexdump_openssl_like
 - Tools
   * x509check
   * chaincheck
   * servercheck (cert + ciphersuites?)
   * Finalize asn1parse / x509 programs with more checks
   * Add support for CSR
   * Create simple PKI tools to create a RSA key, sign, verify, encrypt, decrypt, handle a simple PKI (rsa tool)
   * Passive TLS_Proxy
 - Software engineering
   * Rethink _string_of_value: the options should always be present and we should be able to set a "raw" flag (quotes, 0x) and to override some cases (a function would be called and if it is OK, we take its return value, else we do as usual)
   * Expand binaryRecord to handle update (when using enumerated for example).
   * Use V_Unit = None to handle optional fields.


v0.2 (apr. 2012)
 - ASN1Constraints
   * Rewrite the code to be simpler and value-oriented?
 - OCSP and CRL parsers!
 - X509
   * Clean up code about X509_Algorithm, ATV, AccessDescription, QualifierInfo
   * Add a catalog of all warnings (id, severity, msg, where (possibly recursive where)) / use specific warnings for each interesting X.509 warnings.
   * Add methods in OCSP/CRL extensions to extract data
   * Clean up the toString architecture which still stinks
   * Add functions to be able to change a cert and recompute the signature easily
 - Language
   * Document native functions (with a help field?)
   * Add new primitive types (IPv4, IPv6, int32, int64, etc.)
 - Tools
   * Begin a GUI for PKI tools
   * Add a general config directory, modifiable by cmdline, by general config file and by local config file (which could contain a directory of OIds)
   * s_client
   * Active TLS_Proxy
   * Ajouter liens dgst <- sha1sum
   * dgst : options (-quiet, -hex, -check, -file + args / ou stdin)
   * Gestion du temps passé (man 2 times) et ajout de barres de progression
 - getopt handling to replace Arg
   * short options
   * long options
   * --help handling
 - MRT (file samples at http://data.ris.ripe.net/rrc00/, RFC 6397)?
 - Write some tests to check in browsers
   * certificates with extensions containing images
   * certificates signing each other (A <-> B)
 - PKCS#11 client (prospective)


v0.3 (jul. 2012)
 - Software Engineering
   * Document NewParsingEngine (the invariants in string_input)
   * Write some tests
 - X509
   * add popular extensions (1.2.840.113549.1.9.15 : sMIMECapabilities; 1.3.6.1.5.5.7.1.12 : logoType)
   * Add a test to really check if the idempotence was broken!
 - Tools
   * s_server
 - Crypto
   * Clean up crypto code from polar -> only keep the code really used.
   * Rewrite CBC in Caml (we need to be able to keep a C object with the current context).
 - PKCS#11 ressource (prospective)


v1.0 (oct 2012)
 - Software Engineering
   * Document everything (ocamldoc or doxygen)
   * unit tests for everything
 - Tools which should be usable
   * asn1parse
   * x509
   * rsa
   * pki
   * tlsparse
   * s_client
   * s_server
   * tls_proxy
 - Crypto
   * ECC (see seccure project)
   * Shamir Secret Sharing (see ssss project)


Offer the same services as NSS/openssl:
 - SSLv2/SSLv3/TLSv1/TLSv1.1/TLSv1.2
 - PKCS#1 #3 #5 #7 #8 #9 #10 #11 #12
 - S/MIME
 - X.509v3/OCSP/CRL
 - RSA/DSA/ECDSA/DH/ECDH/AES/3DES/DES/RC2/RC4/SHA1/SHA2/MD2/MD5/HMAC
 - PRNG


Checks on certs / chains
 - if S.AKI is absent but I.SKI is present
 - if S.AKI is present but I.AKI is not


Long Term... it could also be moved upstairs...

- Objects : should they have two dictionaries, plus a list of relevant fields (to have stg like @modified)

- Encoding
  * 2022 -> Simple ASCII (NumericString, PrintableString, VisibleString, IA5String)
  * 2022 (T61String, VideotexString, GraphicString, GeneralString)
  * 10646 / Unicode (UniversalString, BMPString, UTF8String)

Modules
 - MapModule: Add a _dict or _params magic objects ? Remove all _ ?
 - Write the missing update/dump functions
 - Problem with @enriched... it does not work if a sub-dictionary is modified...

Language
 - Write a simple compare function instead of all the equal/lt functions
 - Add a library to filter and extract certs, either in native or interpreted form
 - Add a way to import new native functions (Dynlink for native, equivalent to load for scripts)
 - Custom outputs (global _output, _error) for print/errors function
 - Add for loops, break n, continue n ?
 - concurrentmap (Nproc, OutputTemplate, fun (verif pas d'effet de bord hors la fonction))

Lexer / Parser
 - Improve the error messages of the lexer/parser
 - Handle correctly multiply embedded () "" and ${} with a stack ?!
 - Catch parsing errors when they are due to an incomplete parse -> this way, we could wait for what is to come "> for if "-style

typing
 - Add type constraints in the language, to help understanding errors.
