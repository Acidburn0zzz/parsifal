X509
 - Add AIA and CRLDP extensions
 - Write code to parse PK, Sig.
 - Rewrite PK/Signature as modules.
 - Add a way to enrich/deep parse (to parse PK/sig/exts a posteriori)
 - Use specific warnings for each interesting X.509 warnings.

TLS
 - Rewrite alert types/levels as simple ints, and provide lookup tables to the code.
 - Add a way to enrich/deep parse a posteriori (when parse_certs was not active)
 - Add native lookup_tables
 - Enrich TLS parser.
 - Add parser for SSLv2.

Modules
 - MapModule: Add a _dict or _params magic objects ? Remove all _ ?
 - Write the missing update/dump functions
 - Problem with @enriched... it does not work if a sub-dictionary is modified...

Language
 - Write a simple compare function instead of all the equal/lt functions
 - Add constructors/destructors to manipulate V_BitString / V_Bigint
 - Add a library to filter and extract certs, either in native or interpreted form
 - Add a way to import new functions (Dynlink for native)
 - socket
 - Add encode/decode for base64 + gzip
 - Custom outputs (global _output, _error) for print/errors function
 - Add crypto through external bindings
 - Add for loops, break n, continue n ?
 - concurrentmap (Nproc, OutputTemplate, fun (verif pas d'effet de bord hors la fonction))

Lexer / Parser
 - Improve the error messages of the lexer/parser
 - Handle correctly multiply embedded () "" and ${} with a stack ?!
 - Catch parsing errors when they are due to an incomplete parse -> this way, we could wait for what is to come "> for if "-style

typing
 - Add type constraints in the language, to help understanding errors.

asn1
 - Write in FAcesl a asn1parse like

NewParsingEngine
 - Document the invariants in string_input...
