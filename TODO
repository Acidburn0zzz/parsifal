Language
 - Add options for the parser (asn1.tolerance <- 0, with a new value sort "module")
 - Add a lazy value type, and rewrite asn1 as a module + dictionary
 - So as the lazy thing is worth it, we need a efficient pstate on string (because we would extract the string from the stream and then replay it)
 - Add a expr.ident <- value expression, which will need to deal with left values (maybe it will be alright with Dicts ?)
 - Add a library to filter and extract certs, either in native or interpreted form
 - Add a way to import new functions (Dynlink for native)
 - socket
 - Add more field accessors (DN, X509, Tls) -> should be easy with a dict/object value type?
 - Add encode/decode for base64
 - Custom output (global _output) for print function
 - Add crypto through external bindings
 - Add for loops, break n, continue n ?
 - concurrentmap (Nproc, OutputTemplate, fun (verif pas d'effet de bord hors la fonction))

Lexer / Parser
 - Improve the error messages of the lexer/parser
 - Handle correctly multiply embedded () "" and ${} with a stack ?!
 - Catch parsing errors when they are due to an incomplete parse -> this way, we could wait for what is to come "> for if "-style

Language extension
 - V_Other of string * string (module_name, binary)
 - Each type should contain some functions (parse, print, dump, equals) and a generic accessor
 - Each type could be represented by a new value (V_Module) which should implement options and optionnaly functions
 - print should call module.print / dump and parse too.
 - A chaque utilisation, on appelle parse du module module_name. Celui-ci peut être un module créé à l'aide d'un foncteur utilisant la mémoisation (weak pointers / module Weak ou tables de hachage avec un roulement pour effacer les donnees non utilisees) pour rendre la chose efficace.
    -> une extension enregistre un ensemble de fonctions (print, access) et les associe à un nom
    -> les objets sont abstraits et ne peuvent être manipulés que par print / les accesseurs et les opérations sur les listes

typing
 - Add type constraints in the language, to help understanding errors.

asn1
 - Write in FAcesl a asn1parse like

map tool
 - Add a late interactive mode (first we load files, then we can use them)

Other
 - Enrich TLS parser.
 - Add parser for SSLv2.
