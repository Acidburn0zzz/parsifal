v0.1 (jan. 2012)
 - Crypto
   * Add a is_prime as a C function (Rabbin Miller + PGCD with little p_i products)
   * Add a gen_rsa_key in Caml

 - FIND A NAME TO THIS PROJECT (FAceSL sucks!)
 - Have a Makefile-based build process!
   * ocamldep -I crypto -I asn1 -I common -I formats -I language -I tls -I tools [^_]*/*ml
 - X509
   * Add SAN, AIA and CRLDP extensions
   * Write code to parse DSA PK and Sig.
   * Add a way to enrich/deep parse (to parse PK/sig/exts a posteriori)
   * Add a way to create a certificate object
 - TLS
   * Code construct_chains in caml
         Chain categorization
          - Add signature
          - Add trust store
          - Avoid loops
          - What is a chain -> create a new object
            * a list of certificates, and for each
              - origin (cert n in chain, Mozilla store, IE store)
              - trusted
          - validity span
          - algos used
          - subject
   * Code to check chains against certificate stores
   * Enrich TLS parser.
   * fake_len -> can override computed len
   * tls.dump -> calls record.split if needed
   * record.split -> TODO
   * Add parser for SSLv2.
 - Misc
   * Add encode/decode for gzip
   * Add an option to customize the integer dump -> hexdump or hexdump_with_separator or hexdump_openssl_like
 - Tools
   * x509check
   * chaincheck
   * servercheck (cert + ciphersuites?)
   * Finalize asn1parse / x509 programs with more checks
   * Add support for CSR
   * Create simple PKI tools to create a RSA key, sign, verify, encrypt, decrypt, handle a simple PKI (rsa tool)
   * Passive TLS_Proxy
 - Software engineering
   * Rethink _string_of_value: the options should always be present and we should be able to set a "raw" flag (quotes, 0x) and to override some cases (a function would be called and if it is OK, we take its return value, else we do as usual)
   * Expand binaryRecord to handle update (when using enumerated for example).
   * Use V_Unit = None to handle optional fields.


v0.2 (apr. 2012)
 - X509
   * Clean up code about X509_Algorithm, ATV, AccessDescription, QualifierInfo
   * Add a catalog of all warnings (id, severity, msg, where (possibly recursive where)) / use specific warnings for each interesting X.509 warnings.
   * Add methods in OCSP/CRL extensions to extract data
   * Clean up the toString architecture which still stinks
   * Add functions to be able to change a cert and recompute the signature easily
 - Language
   * Document native functions (help field?)
   * Add new primitive types (IPv4, IPv6, int32, int64, etc.)
 - Tools
   * Begin a GUI for PKI tools
   * Add a general config directory, modifiable by cmdline, by general config file and by local config file (which could contain a directory of OIds)
   * s_client
   * Active TLS_Proxy
   * Ajouter liens dgst <- sha1sum
   * dgst : options (-quiet, -hex, -check, -file + args / ou stdin)
   * Gestion du temps passé (man 2 times) et ajout de barres de progression
 - getopt handling to replace Arg
   * short options
   * long options
   * --help handling
 - MRT (file samples at http://data.ris.ripe.net/rrc00/, RFC 6397)?
 - Write some tests to check in browsers
   * certificates with extensions containing images
   * certificates signing each other (A <-> B)


v0.3 (jul. 2012)
 - Software Engineering
   * Document NewParsingEngine (the invariants in string_input)
   * Write some tests
 - X509
   * add popular extensions (1.2.840.113549.1.9.15 : sMIMECapabilities; 1.3.6.1.5.5.7.1.12 : logoType)
   * Add a test to really check if the idempotence was broken!
 - Tools
   * s_server
 - Crypto
   * Clean up crypto code from polar -> only keep the code really used.
   * Rewrite CBC in Caml (we need to be able to keep a C object with the current context).


v1.0 (oct 2012)
 - Software Engineering
   * Document everything (ocamldoc or doxygen)
   * unit tests for everything
 - Tools which should be usable
   * asn1parse
   * x509
   * rsa
   * pki
   * tlsparse
   * s_client
   * s_server
   * tls_proxy


Checks on certs / chains
 - if S.AKI is absent but I.SKI is present
 - if S.AKI is present but I.AKI is not


Long Term... it could also be moved upstairs...

- Encoding
  * 2022 -> Simple ASCII (NumericString, PrintableString, VisibleString, IA5String)
  * 2022 (T61String, VideotexString, GraphicString, GeneralString)
  * 10646 / Unicode (UniversalString, BMPString, UTF8String)

Modules
 - MapModule: Add a _dict or _params magic objects ? Remove all _ ?
 - Write the missing update/dump functions
 - Problem with @enriched... it does not work if a sub-dictionary is modified...

Language
 - Write a simple compare function instead of all the equal/lt functions
 - Add a library to filter and extract certs, either in native or interpreted form
 - Add a way to import new native functions (Dynlink for native, equivalent to load for scripts)
 - Custom outputs (global _output, _error) for print/errors function
 - Add for loops, break n, continue n ?
 - concurrentmap (Nproc, OutputTemplate, fun (verif pas d'effet de bord hors la fonction))

Lexer / Parser
 - Improve the error messages of the lexer/parser
 - Handle correctly multiply embedded () "" and ${} with a stack ?!
 - Catch parsing errors when they are due to an incomplete parse -> this way, we could wait for what is to come "> for if "-style

typing
 - Add type constraints in the language, to help understanding errors.
