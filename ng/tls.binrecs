(* Simple TLS records *)

let tls_alert_d = [
  "alert_level", FT_Enum ("TlsEnums", "tls_alert_level"), false;
  "alert_type", FT_Enum ("TlsEnums", "tls_alert_type"), false
]

let change_cipher_spec_d = [
  "change_cipher_spec_value", FT_Enum ("TlsEnums", "change_cipher_spec_value"), false
]


(* Handshake records and choices *)

let sni_name_c = [
  "NT_HostName", "HostName", FT_String (VarLen IT_UInt16, false);
]

let server_name_d = [
  "sni_name_type", FT_Enum ("TlsEnums", "name_type"), false;
  "sni_name", FT_Custom (None, "sni_name", ["_sni_name_type"]), false;
]

let server_name_content_c = [
  "ClientToServer", "ClientServerName", FT_List (VarLen IT_UInt16, FT_Custom (None, "server_name", []));
  "ServerToClient", "ServerServerName", FT_Empty;
]

let hello_extension_content_c = [
  "HE_ServerName", "ServerName", FT_Custom (None, "server_name_content", ["direction"]);
  "HE_MaxFragmentLength", "MaxFragmentLength", FT_Integer IT_UInt8;
  "HE_ClientCertificateURL", "ClientCertificateURL", FT_Empty;
(* TODO "HE_TrustedCAKeys", "TrustedCAKeys", FT_?; *)
  "HE_TruncatedMAC", "TruncatedMAC", FT_Empty;
(* TODO: describe the other extensions! *)
]

let hello_extension_d = [
  "extension_type", FT_Enum ("TlsEnums", "extension_type"), false;
  "extension_data", FT_Container (IT_UInt16, FT_Custom (None, "hello_extension_content", ["direction"; "_extension_type"])), false;
]

let client_hello_d = [
  "client_version", FT_Enum ("TlsEnums", "tls_version"), false;
  "client_random", FT_String (FixedLen 32, true), false;
  "client_session_id", FT_String (VarLen IT_UInt8, true), false;
  "ciphersuites", FT_List (VarLen IT_UInt16, FT_Enum ("TlsEnums", "ciphersuite")), false;
  "compression_methods", FT_List (VarLen IT_UInt8, FT_Enum ("TlsEnums", "compression_method")), false;
  "client_extensions", FT_List (VarLen IT_UInt16, FT_Custom (None, "hello_extension", ["ClientToServer"])), true;
]

let server_hello_d = [
  "server_version", FT_Enum ("TlsEnums", "tls_version"), false;
  "server_random", FT_String (FixedLen 32, true), false;
  "server_session_id", FT_String (VarLen IT_UInt8, true), false;
  "ciphersuite", FT_Enum ("TlsEnums", "ciphersuite"), false;
  "compression_method", FT_Enum ("TlsEnums", "compression_method"), false;
  "server_extensions", FT_List (VarLen IT_UInt16, FT_Custom (None, "hello_extension", ["ServerToClient"])), true;
]

let new_session_ticket_d = [
  "ticket_lifetime_hint", FT_Integer IT_UInt32, false;
  "ticket", FT_String (VarLen IT_UInt16, true), false;
]


let certificates_d = [
  "certificate_list", FT_List (VarLen IT_UInt24, FT_String (VarLen IT_UInt24, true)), false
]


let server_dh_params_d = [
  "dh_p", FT_String (VarLen IT_UInt16, true), false;
  "dh_g", FT_String (VarLen IT_UInt16, true), false;
  "dh_Ys", FT_String (VarLen IT_UInt16, true), false;
]

(* TODO: signature? *)
let ske_dhe_params_d = [
  "params", FT_Custom (None, "server_dh_params", []), false;
  "signature", FT_String (Remaining, true), false;
]

let server_key_exchange_c = [
  "KX_DHE", "SKE_DHE", FT_Custom (None, "ske_dhe_params", []);
]

let signature_and_hash_algorithm_d = [
  "hash_algorithm", FT_Enum ("TlsEnums", "hash_algorithm"), false;
  "signature_algorithm", FT_Enum ("TlsEnums", "signature_algorithm"), false;
]

let certificate_request_d = [
  "certificate_types", FT_Enum ("TlsEnums", "client_certificate_type"), false;
  "supported_signature_algorithms", FT_List (VarLen IT_UInt16, FT_Custom (None, "signature_and_hash_algorithm", [])), false;
  "certificate_authorities", FT_List (VarLen IT_UInt16, FT_String (VarLen IT_UInt16, true)), false;
]
	

let handshake_content_c = [
  "HT_HelloRequest", "HelloRequest", FT_Custom (None, "hello_request", []);
  "HT_ClientHello", "ClientHello", FT_Custom (None, "client_hello", []);
  "HT_ServerHello", "ServerHello", FT_Custom (None, "server_hello", []);
  "HT_NewSessionTicket", "NewSessionTicket", FT_Custom (None, "new_session_ticket", []);
  "HT_Certificate", "Certificate", FT_Custom (None, "certificates", []);
  "HT_ServerKeyExchange", "ServerKeyExchange", FT_Custom (None, "server_key_exchange", []);
  "HT_CertificateRequest", "CertificateRequest", FT_Custom (None, "certificate_request", []);
  "HT_ServerHelloDone", "ServerHelloDone", FT_Custom (None, "server_hello_done", []);
]

let handshake_msg_d = [
  "handshake_type", FT_Enum ("TlsEnums", "hs_message_type"), false;
  "handshake_content", FT_Container (IT_UInt24, FT_Custom (None, "handshake_content", ["_handshake_type"])), false;
]


(* TLS record *)

let record_content_c = [
  "CT_Alert", "Alert", FT_Custom (None, "tls_alert", []);
  "CT_Handshake", "Handshake", FT_Custom (None, "handshake_msg", []);
  "CT_ChangeCipherSpec", "ChangeCipherSpec", FT_Custom (None, "change_cipher_spec", []);
  "CT_ApplicationData", "ApplicationData", FT_String (Remaining, true)
]

let tls_record_d = [
  "content_type", FT_Enum ("TlsEnums", "tls_content_type"), false;
  "record_version", FT_Enum ("TlsEnums", "tls_version"), false;
  "record_content", FT_Container (IT_UInt16, FT_Custom (None, "record_content", ["_content_type"])), false;
]




(* Print all the TLS types *)

let _ =
  handle_record_desc ~what:OnlyTypes ("tls_alert",           tls_alert_d, []);
  handle_record_desc ~what:OnlyTypes ("change_cipher_spec",  change_cipher_spec_d, []);

  handle_record_desc ~what:OnlyTypes ("hello_request",       [], []);

  handle_choice_desc ~what:OnlyTypes ("sni_name",
          Some "TlsEnums", Explicit ("name_type"), sni_name_c, "Unparsed_SNIName", [CO_EnrichByDefault]);
  handle_record_desc ~what:OnlyTypes ("server_name",         server_name_d, []);
  handle_choice_desc ~what:OnlyTypes ("server_name_content",
          None, Implicit "direction",
          server_name_content_c, "Unparsed_ServerNameContent", [CO_EnrichByDefault; CO_AddParseParameter "direction"; CO_ExhaustiveDiscriminatingVals]);
  handle_choice_desc ~what:OnlyTypes ("hello_extension_content",
          Some "TlsEnums", Explicit ("extension_type"), hello_extension_content_c, "Unparsed_HelloExtension", [CO_EnrichByDefault; CO_AddParseParameter "direction"]);
  handle_record_desc ~what:OnlyTypes ("hello_extension",     hello_extension_d, [RO_AddParseParameter "direction"]);

  handle_record_desc ~what:OnlyTypes ("client_hello",        client_hello_d, []);
  handle_record_desc ~what:OnlyTypes ("server_hello",        server_hello_d, []);

  handle_record_desc ~what:OnlyTypes ("new_session_ticket",  new_session_ticket_d, []);
  handle_record_desc ~what:OnlyTypes ("certificates",        certificates_d, []);

  handle_record_desc ~what:OnlyTypes ("server_dh_params",    server_dh_params_d, []);
  handle_record_desc ~what:OnlyTypes ("ske_dhe_params",      ske_dhe_params_d, []);
  handle_choice_desc ~what:OnlyTypes ("server_key_exchange",
          None, Implicit "context.future.s_ciphersuite.kx",
          server_key_exchange_c, "Unparsed_SKEContent", [CO_EnrichByDefault]);

  handle_record_desc ~what:OnlyTypes ("signature_and_hash_algorithm", signature_and_hash_algorithm_d, []);
  handle_record_desc ~what:OnlyTypes ("certificate_request", certificate_request_d, []);
  handle_record_desc ~what:OnlyTypes ("server_hello_done",   [], []);
  handle_choice_desc ~what:OnlyTypes ("handshake_content", 
          Some "TlsEnums", Explicit ("handshake_type"), handshake_content_c, "Unparsed_HSContent", [CO_EnrichByDefault]);
  handle_record_desc ~what:OnlyTypes ("handshake_msg",       handshake_msg_d, []);

  handle_choice_desc ~what:OnlyTypes ("record_content",
          Some "TlsEnums", Explicit ("content_type"), record_content_c, "Unparsed_Record", []);
  handle_record_desc ~what:OnlyTypes ("tls_record",          tls_record_d, []);
  ();;


let _ =
  let f = open_in "_tlsContext.ml" in
  let rec print_all_lines () =
    print_endline (input_line f);
    print_all_lines ()
  in
  try print_all_lines ()
  with End_of_file -> ()



(* Print the parsing/printing/dumping functions *)

let _ =
  handle_record_desc ~what:OnlyFuns ("tls_alert",           tls_alert_d, []);
  handle_record_desc ~what:OnlyFuns ("change_cipher_spec",  change_cipher_spec_d, []);

  handle_record_desc ~what:OnlyFuns ("hello_request",       [], []);

  handle_choice_desc ~what:OnlyFuns ("sni_name",
          Some "TlsEnums", Explicit ("name_type"), sni_name_c, "Unparsed_SNIName", [CO_EnrichByDefault]);
  handle_record_desc ~what:OnlyFuns ("server_name",         server_name_d, []);
  handle_choice_desc ~what:OnlyFuns ("server_name_content",
          None, Implicit "direction",
          server_name_content_c, "Unparsed_ServerNameContent", [CO_EnrichByDefault; CO_AddParseParameter "direction"; CO_ExhaustiveDiscriminatingVals]);
  handle_choice_desc ~what:OnlyFuns ("hello_extension_content",
          Some "TlsEnums", Explicit ("extension_type"), hello_extension_content_c, "Unparsed_HelloExtension", [CO_EnrichByDefault; CO_AddParseParameter "direction"]);
  handle_record_desc ~what:OnlyFuns ("hello_extension",     hello_extension_d, [RO_AddParseParameter "direction"]);

  handle_record_desc ~what:OnlyFuns ("client_hello",        client_hello_d, []);
  handle_record_desc ~what:OnlyFuns ("server_hello",        server_hello_d, []);

  handle_record_desc ~what:OnlyFuns ("new_session_ticket",  new_session_ticket_d, []);
  handle_record_desc ~what:OnlyFuns ("certificates",        certificates_d, []);

  handle_record_desc ~what:OnlyFuns ("server_dh_params",    server_dh_params_d, []);
  handle_record_desc ~what:OnlyFuns ("ske_dhe_params",      ske_dhe_params_d, []);
  handle_choice_desc ~what:OnlyFuns ("server_key_exchange",
          None, Implicit "context.future.s_ciphersuite.kx",
          server_key_exchange_c, "Unparsed_SKEContent", [CO_EnrichByDefault]);

  handle_record_desc ~what:OnlyFuns ("signature_and_hash_algorithm", signature_and_hash_algorithm_d, []);
  handle_record_desc ~what:OnlyFuns ("certificate_request", certificate_request_d, []);
  handle_record_desc ~what:OnlyFuns ("server_hello_done",   [], []);
  handle_choice_desc ~what:OnlyFuns ("handshake_content", 
          Some "TlsEnums", Explicit ("handshake_type"), handshake_content_c, "Unparsed_HSContent", [CO_EnrichByDefault]);
  handle_record_desc ~what:OnlyFuns ("handshake_msg",       handshake_msg_d, []);

  handle_choice_desc ~what:OnlyFuns ("record_content",
          Some "TlsEnums", Explicit ("content_type"), record_content_c, "Unparsed_Record", []);
  handle_record_desc ~what:OnlyFuns ("tls_record",          tls_record_d, []);
  ();;
