(* Simple TLS records *)

let tls_alert_d = [
  "alert_level", FT_Enum (IT_UInt8, "TlsEnums", "tls_alert_level"), false;
  "alert_type", FT_Enum (IT_UInt8, "TlsEnums", "tls_alert_type"), false
]

let change_cipher_spec_d = [
  "change_cipher_spec_value", FT_Enum (IT_UInt8, "TlsEnums", "change_cipher_spec_value"), false
]


(* Handshake records and choices *)

let signature_and_hash_algorithm_d = [
  "hash_algorithm", FT_Enum (IT_UInt8, "TlsEnums", "hash_algorithm"), false;
  "signature_algorithm", FT_Enum (IT_UInt8, "TlsEnums", "signature_algorithm"), false;
]

let hello_extension_content_c = [
]

let hello_extension_d = [
  "extension_type", FT_Enum (IT_UInt16, "TlsEnums", "extension_type"), false;
  "extension_data", FT_Container (IT_UInt16, FT_Custom (None, "hello_extension_content", ["_extension_type"])), false;
]

let client_hello_d = [
  "client_version", FT_Enum (IT_UInt16, "TlsEnums", "tls_version"), false;
  "client_random", FT_String (FixedLen 32, true), false;
  "client_session_id", FT_String (VarLen IT_UInt8, true), false;
  "ciphersuites", FT_List (VarLen IT_UInt16, FT_Enum (IT_UInt16, "TlsEnums", "ciphersuite")), false;
  "compression_methods", FT_List (VarLen IT_UInt8, FT_Enum (IT_UInt8, "TlsEnums", "compression_method")), false;
  "client_extensions", FT_List (VarLen IT_UInt16, FT_Custom (None, "hello_extension", [])), true;
]

let server_hello_d = [
  "server_version", FT_Enum (IT_UInt16, "TlsEnums", "tls_version"), false;
  "server_random", FT_String (FixedLen 32, true), false;
  "server_session_id", FT_String (VarLen IT_UInt8, true), false;
  "ciphersuite", FT_Enum (IT_UInt16, "TlsEnums", "ciphersuite"), false;
  "compression_method", FT_Enum (IT_UInt8, "TlsEnums", "compression_method"), false;
  "server_extensions", FT_List (VarLen IT_UInt16, FT_Custom (None, "hello_extension", [])), true;
]

let new_session_ticket_d = [
  "ticket_lifetime_hint", FT_Integer IT_UInt32, false;
  "ticket", FT_String (VarLen IT_UInt16, true), false;
]


let certificates_d = [
  "certificate_list", FT_List (VarLen IT_UInt24, FT_String (VarLen IT_UInt24, true)), false
]


let server_dh_params_d = [
  "dh_p", FT_String (VarLen IT_UInt16, true), false;
  "dh_g", FT_String (VarLen IT_UInt16, true), false;
  "dh_Ys", FT_String (VarLen IT_UInt16, true), false;
]

(* TODO: signature? *)
let ske_dhe_params_d = [
  "params", FT_Custom (None, "server_dh_params", []), false;
  "signature", FT_String (Remaining, true), false;
]

let server_key_exchange_c = [
  "KX_DHE", "SKE_DHE", FT_Custom (None, "ske_dhe_params", []);
]


let certificate_request_d = [
  "certificate_types", FT_Enum (IT_UInt8, "TlsEnums", "client_certificate_type"), false;
  "supported_signature_algorithms", FT_List (VarLen IT_UInt16, FT_Custom (None, "signature_and_hash_algorithm", [])), false;
  "certificate_authorities", FT_List (VarLen IT_UInt16, FT_String (VarLen IT_UInt16, true)), false;
]
	

let handshake_content_c = [
  "HT_HelloRequest", "HelloRequest", FT_Custom (None, "hello_request", []);
  "HT_ClientHello", "ClientHello", FT_Custom (None, "client_hello", []);
  "HT_ServerHello", "ServerHello", FT_Custom (None, "server_hello", []);
  "HT_NewSessionTicket", "NewSessionTicket", FT_Custom (None, "new_session_ticket", []);
  "HT_Certificate", "Certificate", FT_Custom (None, "certificates", []);
  "HT_ServerKeyExchange", "ServerKeyExchange", FT_Custom (None, "server_key_exchange", []);
  "HT_CertificateRequest", "CertificateRequest", FT_Custom (None, "certificate_request", []);
  "HT_ServerHelloDone", "ServerHelloDone", FT_Custom (None, "server_hello_done", []);
]

let handshake_msg_d = [
  "handshake_type", FT_Enum (IT_UInt8, "TlsEnums", "hs_message_type"), false;
  "handshake_content", FT_Container (IT_UInt24, FT_Custom (None, "handshake_content", ["_handshake_type"])), false;
]


(* TLS record *)

let record_content_c = [
  "CT_Alert", "Alert", FT_Custom (None, "tls_alert", []);
  "CT_Handshake", "Handshake", FT_Custom (None, "handshake_msg", []);
  "CT_ChangeCipherSpec", "ChangeCipherSpec", FT_Custom (None, "change_cipher_spec", []);
  "CT_ApplicationData", "ApplicationData", FT_String (Remaining, true)
]

let tls_record_d = [
  "content_type", FT_Enum (IT_UInt8, "TlsEnums", "tls_content_type"), false;
  "record_version", FT_Enum (IT_UInt16, "TlsEnums", "tls_version"), false;
  "record_content", FT_Container (IT_UInt16, FT_Custom (None, "record_content", ["_content_type"])), false;
]




let descriptions = [
  Record ("signature_and_hash_algorithm", signature_and_hash_algorithm_d);

  Record ("tls_alert",           tls_alert_d);
  Record ("change_cipher_spec",  change_cipher_spec_d);

  Record ("hello_request",       []);
  Choice ("hello_extension_content",
          Some "TlsEnums", Explicit ("extension_type"), hello_extension_content_c, "Unparsed_HelloExtension", true);
  Record ("hello_extension",     hello_extension_d);
  Record ("client_hello",        client_hello_d);
  Record ("server_hello",        server_hello_d);
  Record ("new_session_ticket",  new_session_ticket_d);
  Record ("certificates",        certificates_d);
  Record ("server_dh_params",    server_dh_params_d);
  Record ("ske_dhe_params",      ske_dhe_params_d);
  Choice ("server_key_exchange",
          Some "TlsContext", Implicit "TlsContext.extract_future_kx context",
          server_key_exchange_c, "Unparsed_SKEContent", true);
  Record ("certificate_request", certificate_request_d);
  Record ("server_hello_done",   []);
  Choice ("handshake_content", 
          Some "TlsEnums", Explicit ("handshake_type"), handshake_content_c, "Unparsed_HSContent", true);
  Record ("handshake_msg",       handshake_msg_d);

  Choice ("record_content",
          Some "TlsEnums", Explicit ("content_type"), record_content_c, "Unparsed_Record", false);
  Record ("tls_record",          tls_record_d);
]
