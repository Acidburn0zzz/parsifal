#!/home/yeye/dev/FAceSL/facesl.native

parser.tolerance <- 4;
parser.minDisplay <- 4;
printer.separator <- "\t";


foreach_answer := function (f, path) {
    foreach (open (path), answer_dump.parse, f);
};      


string_of_msg := function (msg) {
    local res;

    if (! msg) || (! msg.content_type) || (msg.content_type ~= "Unknown content type")
    then return "Invalid record"; fi;

    if (msg.content_type == "Handshake") then
        if exists msg.content.message_type then
            return "Handshake (${msg.content.message_type})";
        else
            return "Handshake (Invalid message)";
        fi;
    fi;

    if (msg.content_type == "Alert") then
        if exists msg.content.type then
            return "Alert (${msg.content.level}, ${msg.content.type})";
        else
            return "Alert (Invalid message)";
        fi;
    fi;

    return msg.content_type;
};


count := 0;
correct_count := 0;
content_types := dict ();
samples := dict ();

add_sample := function (msg_types) {
    "(${dget_def (samples, msg_types, "???")})  \t" ++ msg_types
};


handle_answer := function (answer) {
    local msgs, strs, category, prev_count;

    count := count + 1;

    msgs := tls.parse (answer.ip, answer.content);
    strs := map (string_of_msg, msgs);
    category := concat (", ", strs);
    if (length (category) = 0) then category := "EMPTY" fi;

    if single then print (answer.ip, category) fi;

    if (length (strs) > 0) && (! category ~= "Invalid") then
        correct_count := correct_count + 1;
    fi;

    prev_count := dget_def (content_types, category, 0);
    if prev_count = 0 then dset (samples, category, answer.client_hello_type ++ ":" ++ answer.ip) fi;
    dset (content_types, category, prev_count + 1);

   if (freq && count % freq = 0) then
      print ();
      print (count, correct_count);
      print_stats (content_types, add_sample);
    fi
};


single := exists getenv ("SINGLE");

if exists getenv ("FREQ") then
    freq := getenv ("FREQ");
else
    freq := 0;
fi;

map (foreach_answer (handle_answer), args);

print ();
print (count, correct_count);
print_stats (content_types, add_sample);
