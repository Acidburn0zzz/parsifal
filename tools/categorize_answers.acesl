#!/home/yeye/dev/FAceSL/facesl.native

tls._minDisplay <- 2;
asn1._minDisplay <- 5;

foreach_answer := function (f, path) {
    foreach (open (path), parse ("answer_dump"), f);
};      

msgs_of_answer := function (answer) {
    extract_aux := function (flux) {
        if ! flux then return [] fi;
        local msg;
        msg := parse ("tls", flux);
        if msg && (! (msg.content_type ~= "^Unknown content type"))
        then msg::(extract_aux (flux))
        else
            local res;
            res := dict ();
            res.content_type <- "InvalidMessage";
	    [res]
        fi
    };
    extract_aux (stream (answer.ip, answer.content));
};

string_of_msg := function (record) {
    local ct;

    ct := record.content_type;
    if ct == "Handshake" then
        "Handshake(${record.handshake_msg_type})"
    else
        if ct == "Alert" then
            "Alert(${record.alert_level},${record.alert_type})"
        else
            ct
        fi
    fi
};


count := 0;
correct_count := 0;
content_types := dict ();
samples := dict ();

add_sample := function (msg_types) {
    msg_types ++ " (${dget_def (samples, msg_types, "???")})"
};

count_correct_answers := function (answer) {
    local msgs, good, bad;

    count := count + 1;

    msgs := msgs_of_answer (answer);
    bad := filter (function (x) {x.content_type ~= "InvalidMessage"}, msgs);
    if msgs && !bad  then
        correct_count := correct_count + 1;
    fi;

    local msg_types, prev_count;
    msg_types := "${answer.msg_type} - " ++ concat (" ", map (string_of_msg, msgs));
    prev_count := dget_def (content_types, msg_types, 0);
    if prev_count = 0 then dset (samples, msg_types, answer.client_hello_type ++ ":" ++ answer.ip) fi;
    dset (content_types, msg_types, prev_count + 1);

    if (count % 1000 = 0) then
      print ();
      print (count, correct_count);
      print_stats (content_types, add_sample);
    fi
};

map (foreach_answer (count_correct_answers), args);

print ();
print (count, correct_count);
print_stats (content_types, add_sample);
