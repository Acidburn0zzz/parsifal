#!/home/yeye/dev/FAceSL/facesl.native -f

tls._minDisplay <- 2;

foreach_answer := function (f, path) {
    foreach (open (path), answer_dump.parse, f);
};


extract_server_hello := function (answer) {
    local msg;

    if answer then
        msg := tls.parse (stream (answer.ip, answer.content));
	if msg && (exists msg.handshake_msg_type) && (msg.handshake_msg_type = "Server Hello") then return msg fi;
    fi
};


stat_incr := function (dict, val) {
    dset (dict, val, dget_def (dict, val, 0) + 1);
};


count_ciphers_answers := function (answer) {
    local server_hello;

    server_hello := extract_server_hello (answer);
    if (server_hello) then
      stat_incr (suites_stat, server_hello.ciphersuite);
      stat_incr (compression_stat, server_hello.compression_method);
      stat_incr (versions_stat, "${server_hello.version} - ${server_hello.sh_version}");
      stat_incr (session_id_stat, length (server_hello.session_id));
    fi
};

suites_stat := dict (30);
compression_stat := dict (2);
versions_stat := dict (10);
session_id_stat := dict (10);

map (foreach_answer (count_ciphers_answers), args);

print ("Versions (Record version - Server Hello version):");
print_stats (versions_stat);

print ("\nCipher suites:");
print_stats (suites_stat, as_hexa_int (4), make_lookup (open ("ciphersuites.lookup")));

print ("\nCompression methods");
print_stats (compression_stat, as_hexa_int (2), make_lookup (open ("compression.lookup")));

print ("\nSession Id length");
print_stats (session_id_stat);
